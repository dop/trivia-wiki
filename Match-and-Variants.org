
** Macro /match,ematch,cmatch/

+ Syntax ::
  *match* /argument/ &body /{clause}*/ ---> /result/

  *ematch* /argument/ &body /{clause}*/ ---> /result/

  *cmatch* /argument/ &body /{clause}*/ ---> /result/
+ argument :: a form, evaluated.
+ clause :: -- ( /pattern/ &body /{bodyform}*/ )
+ pattern :: a pattern language.
+ bodyform :: an implicit progn.

Matches /argument/ against the patterns provided in /clauses/. Evaluate the /bodyform/ of the first clause whose pattern matches against /argument/. /bodyform/ is treated as an implicit progn.

If no clauses have matched the given argument, /match/ returns /nil/. In contrast, /ematch/ signals an error match-error/, and /cmatch/ signals a correctable /match-error/.

** Macro /match*,ematch*,cmatch*/

+ Syntax ::
   *match** (&rest /arguments/) &body /{multiclause}*/ ---> /result/
   
   *ematch** (&rest /arguments/) &body /{multiclause}*/ ---> /result/
   
   *cmatch** (&rest /arguments/) &body /{multiclause}*/ ---> /result/
+ arguments :: a list of forms, evaluated.
+ multiclause :: -- ((&rest /patterns/) &body /{bodyform}*/ )
+ patterns :: a list of pattern languages.
+ bodyform :: an implicit progn.

/arguments/ are evaluated in left-to-right manner, and the /patterns/ are matched against the results of evaluation of /arguments/ in left-to-right manner.  Evaluate the /bodyform/ of the first clause whose patterns match successfully.

 When the number of /patterns/ in a clause is insufficient, it is padded with wildcard patterns, i.e., no check is conducted. In contrast, excessive number of patterns will signal a compile-time error.

** Macro /multiple-value-match, multiple-value-ematch, multiple-value-cmatch/

+ Syntax ::
   *multiple-value-match* /values-form/ &body /{multiclause}*/ ---> /result/
   
   *multiple-value-ematch* /values-form/ &body /{multiclause}*/ ---> /result/
   
   *multiple-value-cmatch* /values-form/ &body /{multiclause}*/ ---> /result/
+ arguments :: a list of forms, evaluated.
+ multiclause :: -- ((&rest /patterns/) &body /{bodyform}*/ )
+ patterns :: a list of pattern languages.
+ bodyform :: an implicit progn.

Similar to /match*,ematch*/ and /cmatch*/, but this is for multiple-value.
/values-form/ is evaluated, and the each value of returned values are matched against the patterns provided in /multiclauses/.

** Macro /lambda-[ec]?match[*]?/ | /defun-[ec]?match[*]?/

+ Syntax ::
   *lambda-match* &body /{clauses}*/ ---> /result/
   
   *lambda-ematch*  &body /{clause}*/ ---> /result/
   
   *lambda-cmatch*  &body /{clause}*/ ---> /result/

   *lambda-match**  &body /{multiclause}*/ ---> /result/
   
   *lambda-ematch** &body /{multiclause}*/ ---> /result/
   
   *lambda-cmatch** &body /{multiclause}*/ ---> /result/

   *defun-match* name (arg) &body /{clause}*/ ---> /result/

   *defun-ematch* name (arg) &body /{clause}*/ ---> /result/
   
   *defun-cmatch* name (arg) &body /{clause}*/ ---> /result/

   *defun-match** name args &body /{multiclause}*/ ---> /result/
   
   *defun-ematch** name args &body /{multiclause}*/ ---> /result/
   
   *defun-cmatch** name args &body /{multiclause}*/ ---> /result/
+ clause :: -- (/pattern/ &body /{bodyform}*/ )
+ multiclause :: -- ((&rest /patterns/) &body /{bodyform}*/ )
+ pattern :: a pattern form.
+ bodyform :: an implicit progn.

These are the shortcuts for writing a function that performs a pattern matching immediately.

** let-match, let-match*

They are short macros on top of ematch*.

```
(trivia:let-match ((a 1)
                   ;; this works but can't just do just b with current implementation
                   (b)
                   ((list _ c d) (list 1 2 3))
                   ((cons e f) '(4 . 5))
                   ;; trivia doesn't have a values pattern
                   ((last (list g h) 2)
                    (multiple-value-list (values 1 2 3 4 5 6 7))))
  (list a b c d e f g h))
;; => (1 NIL 2 3 4 5 6 7)
```